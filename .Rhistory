transition_reveal(along = tod, keep_last = TRUE) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") +
xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
theme_classic() +
theme(strip.background = element_blank(),
legend.title = element_blank(),
legend.position = "right") +
scale_y_continuous(labels = comma, limits = c(1e5, 8.5e5))
# Animate the plot
animate(p3, renderer = gifski_renderer(), height = 400, width = 550)
anim_save('/Users/johanvandenhoogen/ETH/Projects/general_use_figures/costa_rica/gif3.gif')
animate(p1, renderer = gifski_renderer(), height = 800, width = 1100)
anim_save('/Users/johanvandenhoogen/ETH/Projects/general_use_figures/costa_rica/gif1.gif')
animate(p1, renderer = gifski_renderer(), height = 600, width = 800)
anim_save('/Users/johanvandenhoogen/ETH/Projects/general_use_figures/costa_rica/gif1.gif')
rm(list = ls())
library(data.table)
library(lubridate)
library(scales)
library(plyr)
library(gganimate)
library(tidyverse)
`%notin%` <- Negate(`%in%`)
type_table <- fread('/Users/johanvandenhoogen/ETH/Projects/costa_rica/sites_type_table.csv')
df <- fread('/Users/johanvandenhoogen/ETH/Projects/costa_rica/site_freq_data_full.csv') %>%
mutate(Type = ifelse(Type == "", NA, Type)) %>%
na.omit() %>%
filter(Minute %notin% c(385, 386, 1080))
df_summarised_10min <- df %>%
# filter(freq_category %in% c('5-6 kHz', '6-7 kHz', '7-8 kHz', '8-9 kHz')) %>%
filter(freq_category %in% c('3-4 kHz', '4-5 kHz', '5-6 kHz', '6-7 kHz', '7-8 kHz', '8-9 kHz')) %>%
mutate(nearest_10 = round_any(Minute, 10, round)) %>%
group_by(Type, nearest_10) %>%
dplyr::summarise(
mean_PMN = mean(sum_PMN, na.rm = TRUE)) %>%
mutate(tod = as.POSIXct("2023-12-13 00:00:00") + minutes(nearest_10))
wasserstein10min <- fread('/Users/johanvandenhoogen/ETH/Projects/costa_rica/wasserstein_dist_results_10minavg.csv')
p1 <- df_summarised_10min %>%
filter(Type %in% c("Reference_Forest", "Pasture", "Natural_Regeneration")) %>% # Plot 3
ggplot(aes(x = tod, y = mean_PMN, color = Type)) +
geom_line(linewidth = 0.8) +
theme_classic() +
theme(strip.background = element_blank()) +
transition_reveal(tod, keep_last=FALSE) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") + xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
scale_fill_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
guide = 'none') +
scale_y_continuous(labels = scales::comma, limits = c(1e5, 8.5e5)) +
# guides(color = guide_legend(position = "inside")) +
theme(#legend.position.inside = c(0.8, 0.9),
legend.title = element_blank())
# geom_vline(color = 'grey50', xintercept = as.POSIXct("2023-12-13 00:00:00") + minutes(315), linetype = 'dashed', linewidth = 0.5) +
# geom_vline(color = 'grey50', xintercept = as.POSIXct("2023-12-13 00:00:00") + minutes(1070), linetype = 'dashed', linewidth = 0.5)
animate(p1, renderer = gifski_renderer(), height=400, width=550)
anim_save('/Users/johanvandenhoogen/ETH/Projects/general_use_figures/tmp.gif')
ggsave('/Users/johanvandenhoogen/ETH/Projects/costa_rica/.png', p1, width = 6, height = 5, dpi = 300)
p1 <- df_summarised_10min %>%
filter(Type %in% c("Pasture")) %>% # Plot 1
ggplot(aes(x = tod, y = mean_PMN, color = Type)) +
geom_line(linewidth = 1.5) +
theme_classic() +
theme(strip.background = element_blank()) +
transition_reveal(tod, keep_last=TRUE) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") + xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
scale_fill_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
guide = 'none') +
scale_y_continuous(labels = scales::comma, limits = c(1e5, 8.5e5)) +
# guides(color = guide_legend(position = "inside")) +
theme(#legend.position.inside = c(0.8, 0.9),
legend.title = element_blank())
animate(p1, renderer = gifski_renderer(), height = 600, width = 800)
anim_save('/Users/johanvandenhoogen/ETH/Projects/general_use_figures/costa_rica/gif1.gif')
# Plot 2
df_static <- df_summarised_10min %>%
filter(Type == "Pasture") %>%
dplyr::rename(tod_static = tod)
df_anim <- df_summarised_10min %>%
filter(Type %in% c("Reference_Forest"))
p2 <- ggplot() +
geom_line(data = df_static, aes(x = tod_static, y = mean_PMN, color = Type), linewidth = 1.5) +
geom_line(data = df_anim, aes(x = tod, y = mean_PMN, color = Type), linewidth = 1.5) +
transition_reveal(along = tod, keep_last = TRUE) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") +
xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
theme_classic() +
theme(strip.background = element_blank(),
legend.title = element_blank(),
legend.position = "right") +
scale_y_continuous(labels = comma, limits = c(1e5, 8.5e5))
# Animate the plot
animate(p2, renderer = gifski_renderer(), height = 600, width = 800)
anim_save('/Users/johanvandenhoogen/ETH/Projects/general_use_figures/costa_rica/gif2.gif')
# Plot 3
df_static <- df_summarised_10min %>%
filter(Type %in% c("Pasture", "Reference_Forest")) %>%
dplyr::rename(tod_static = tod)
df_anim <- df_summarised_10min %>%
filter(Type %in% c("Natural_Regeneration"))
p3 <- ggplot() +
geom_line(data = df_static, aes(x = tod_static, y = mean_PMN, color = Type), linewidth = 1.5) +
geom_line(data = df_anim, aes(x = tod, y = mean_PMN, color = Type), linewidth = 1.5) +
transition_reveal(along = tod, keep_last = TRUE) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") +
xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
theme_classic() +
theme(strip.background = element_blank(),
legend.title = element_blank(),
legend.position = "right") +
scale_y_continuous(labels = comma, limits = c(1e5, 8.5e5))
# Animate the plot
animate(p3, renderer = gifski_renderer(), height = 600, width = 800)
anim_save('/Users/johanvandenhoogen/ETH/Projects/general_use_figures/costa_rica/gif3.gif')
p1 <- df_summarised_10min %>%
filter(Type %in% c("Pasture")) %>% # Plot 1
ggplot(aes(x = tod, y = mean_PMN, color = Type)) +
geom_line(linewidth = 1.5) +
theme_classic() +
theme(strip.background = element_blank()) +
transition_reveal(tod, keep_last=TRUE) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") + xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
scale_fill_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
guide = 'none') +
scale_y_continuous(labels = scales::comma, limits = c(1e5, 8.5e5)) +
guides(color = guide_legend(position = "inside")) +
theme(#legend.position.inside = c(0.8, 0.9),
legend.title = element_blank())
animate(p1, renderer = gifski_renderer(), height = 600, width = 800)
p1 <- df_summarised_10min %>%
filter(Type %in% c("Pasture")) %>% # Plot 1
ggplot(aes(x = tod, y = mean_PMN, color = Type)) +
geom_line(linewidth = 1.5) +
theme_classic() +
theme(strip.background = element_blank()) +
transition_reveal(tod, keep_last=TRUE) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") + xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
scale_fill_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
guide = 'none') +
scale_y_continuous(labels = scales::comma, limits = c(1e5, 8.5e5)) +
guides(color = guide_legend(position = "inside")) +
theme(legend.position.inside = c(0.8, 0.9),
legend.title = element_blank())
animate(p1, renderer = gifski_renderer(), height = 600, width = 800)
p2 <- ggplot() +
geom_line(data = df_static, aes(x = tod_static, y = mean_PMN, color = Type), linewidth = 1.5) +
geom_line(data = df_anim, aes(x = tod, y = mean_PMN, color = Type), linewidth = 1.5) +
transition_reveal(along = tod, keep_last = TRUE) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") +
xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
theme_classic() +
theme(strip.background = element_blank(),
legend.title = element_blank(),
legend.position = "right") +
scale_y_continuous(labels = scales::comma, limits = c(1e5, 8.5e5)) +
guides(color = guide_legend(position = "inside")) +
theme(legend.position.inside = c(0.8, 0.9),
legend.title = element_blank())
# Animate the plot
animate(p2, renderer = gifski_renderer(), height = 600, width = 800)
# Plot 2
df_static <- df_summarised_10min %>%
filter(Type == "Pasture") %>%
dplyr::rename(tod_static = tod)
df_anim <- df_summarised_10min %>%
filter(Type %in% c("Reference_Forest"))
p2 <- ggplot() +
geom_line(data = df_static, aes(x = tod_static, y = mean_PMN, color = Type), linewidth = 1.5) +
geom_line(data = df_anim, aes(x = tod, y = mean_PMN, color = Type), linewidth = 1.5) +
transition_reveal(along = tod, keep_last = TRUE) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") +
xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
theme_classic() +
theme(strip.background = element_blank(),
legend.title = element_blank(),
legend.position = "right") +
scale_y_continuous(labels = scales::comma, limits = c(1e5, 8.5e5)) +
guides(color = guide_legend(position = "inside")) +
theme(legend.position.inside = c(0.8, 0.9),
legend.title = element_blank())
# Animate the plot
animate(p2, renderer = gifski_renderer(), height = 600, width = 800)
anim_save('/Users/johanvandenhoogen/ETH/Projects/general_use_figures/costa_rica/gif2.gif')
# Plot 3
df_static <- df_summarised_10min %>%
filter(Type %in% c("Pasture", "Reference_Forest")) %>%
dplyr::rename(tod_static = tod)
df_anim <- df_summarised_10min %>%
filter(Type %in% c("Natural_Regeneration"))
p3 <- ggplot() +
geom_line(data = df_static, aes(x = tod_static, y = mean_PMN, color = Type), linewidth = 1.5) +
geom_line(data = df_anim, aes(x = tod, y = mean_PMN, color = Type), linewidth = 1.5) +
transition_reveal(along = tod, keep_last = TRUE) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") +
xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
theme_classic() +
theme(strip.background = element_blank(),
legend.title = element_blank(),
legend.position = "right") +
scale_y_continuous(labels = scales::comma, limits = c(1e5, 8.5e5)) +
guides(color = guide_legend(position = "inside")) +
theme(legend.position.inside = c(0.8, 0.9),
legend.title = element_blank())
# Animate the plot
animate(p3, renderer = gifski_renderer(), height = 600, width = 800)
anim_save('/Users/johanvandenhoogen/ETH/Projects/general_use_figures/costa_rica/gif3.gif')
p1 <- df_summarised_10min %>%
filter(Type %in% c("Pasture")) %>% # Plot 1
ggplot(aes(x = tod, y = mean_PMN, color = Type)) +
geom_line(linewidth = 1.5) +
theme_classic() +
theme(strip.background = element_blank()) +
transition_reveal(tod, keep_last=TRUE) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") + xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
scale_fill_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
guide = 'none') +
scale_y_continuous(labels = scales::comma, limits = c(1e5, 8.5e5)) +
guides(color = guide_legend(position = "inside")) +
theme(legend.position.inside = c(0.8, 0.9),
legend.title = element_blank())
animate(p1, renderer = gifski_renderer(), height = 600, width = 800)
anim_save('/Users/johanvandenhoogen/ETH/Projects/general_use_figures/costa_rica/gif1.gif')
setwd('/Users/johanvandenhoogen/GitHub/Costa_Rica_PSA_Acoustic_Analysis')
`%notin%` <- Negate(`%in%`)
breaks <- c(0, seq(1, 24))
labels <- paste0(head(breaks, -1), "-", tail(breaks, -1), " kHz")
type_table <- fread('data/sites_type_table.csv')
df <- fread('data/site_freq_data_full.csv') %>%
mutate(Type = ifelse(Type == "", NA, Type)) %>%
na.omit() %>%
filter(Minute %notin% c(385, 386, 1080))
# Summarise data by type and write to file
df_type_summary <- df %>%
group_by(Type, Minute, freq_category) %>%
summarise(
mean_PMN = mean(sum_PMN, na.rm = TRUE))
df_type_summary <- fread('data/site_freq_data_perType_summarised.csv')
df_type_summary <- fread('data/site_freq_data_perType_summarised.csv')
# # Plot by frequency bins, for each type
df_type_summary %>%
ggplot(aes(x = Minute, y = mean_PMN, color = Type)) +
geom_line(linewidth = 0.04) +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833")) +
facet_wrap(~ Type) +
theme_minimal()
# Plot by types, for each frequency bin
p <- df_type_summary %>%
# filter(Minute >= 285 & Minute <= 320) %>%
mutate(order = factor(freq_category, levels=labels)) %>%
ggplot(aes(x = Minute, y = mean_PMN, color = Type)) +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833")) +
# geom_ribbon(aes(ymin = mean_PMN - sd_PMN, ymax = mean_PMN + sd_PMN), color = NA, alpha = 0.3) +
geom_line() +  facet_wrap(~ order) +
theme_minimal() +
ylab("Mean Power-minus-Noise")
p
p
df_type_summary
df_type_summary %>%
# filter(Minute >= 285 & Minute <= 320) %>%
mutate(order = factor(freq_category, levels=labels)) %>%
ggplot(aes(x = Minute, y = mean_PMN, color = Type)) +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833")) +
# geom_ribbon(aes(ymin = mean_PMN - sd_PMN, ymax = mean_PMN + sd_PMN), color = NA, alpha = 0.3) +
geom_line() +  facet_wrap(~ order) +
theme_minimal() +
ylab("Mean Power-minus-Noise")
rm(list = ls())
library(data.table)
library(plyr)
library(lubridate)
library(patchwork)
library(scales)
library(foreach)
library(doParallel)
library(tidyverse)
`%notin%` <- Negate(`%in%`)
breaks <- c(0, seq(1, 24))
labels <- paste0(head(breaks, -1), "-", tail(breaks, -1), " kHz")
type_table <- fread('data/sites_type_table.csv')
df <- fread('data/site_freq_data_full.csv') %>%
mutate(Type = ifelse(Type == "", NA, Type)) %>%
na.omit() %>%
filter(Minute %notin% c(385, 386, 1080))
# Summarise data by type and write to file
df_type_summary <- df %>%
group_by(Type, Minute, freq_category) %>%
summarise(
mean_PMN = mean(sum_PMN, na.rm = TRUE))
df_type_summary <- fread('data/site_freq_data_perType_summarised.csv')
# # Plot by frequency bins, for each type
df_type_summary %>%
ggplot(aes(x = Minute, y = mean_PMN, color = Type)) +
geom_line(linewidth = 0.04) +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833")) +
facet_wrap(~ Type) +
theme_minimal()
# Plot by types, for each frequency bin
p <- df_type_summary %>%
# filter(Minute >= 285 & Minute <= 320) %>%
mutate(order = factor(freq_category, levels=labels)) %>%
ggplot(aes(x = Minute, y = mean_PMN, color = Type)) +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833")) +
# geom_ribbon(aes(ymin = mean_PMN - sd_PMN, ymax = mean_PMN + sd_PMN), color = NA, alpha = 0.3) +
geom_line() +  facet_wrap(~ order) +
theme_minimal() +
ylab("Mean Power-minus-Noise")
p
ggsave('figures/pmn_per_bin.png', plot = p)
ggsave('figures/pmn_per_bin.pdf', plot = p)
df_summarised_10min <- df %>%
# filter(freq_category %in% c('5-6 kHz', '6-7 kHz', '7-8 kHz', '8-9 kHz')) %>%
filter(freq_category %in% c('3-4 kHz', '4-5 kHz', '5-6 kHz', '6-7 kHz', '7-8 kHz', '8-9 kHz')) %>%
mutate(nearest_10 = round_any(Minute, 10, round)) %>%
group_by(Type, nearest_10) %>%
dplyr::summarise(
mean_PMN = mean(sum_PMN, na.rm = TRUE)) %>%
mutate(tod = as.POSIXct("2023-12-13 00:00:00") + minutes(nearest_10))
wasserstein10min <- fread('data/wasserstein_dist_results_10minavg.csv')
p1 <- df_summarised_10min %>%
# filter(Type == "Reference_Forest") %>% # Plot 1
# filter(Type %in% c("Reference_Forest", "Pasture")) %>% # Plot 2
# filter(Type %in% c("Reference_Forest", "Pasture", "Natural_Regeneration")) %>% # Plot 3
ggplot(aes(x = tod, y = mean_PMN, color = Type)) +
# geom_ribbon(aes(ymin = mean_PMN - sd_PMN, ymax = mean_PMN + sd_PMN), color = NA, alpha = 0.3) +
geom_line(linewidth = 0.8) +
theme_classic() +
theme(strip.background = element_blank()) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") + xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
# geom_col(data = wasserstein10min %>%
#            rename(Type = closest_type) %>%
#            mutate(tod = as.POSIXct("2023-12-13 00:00:00") + minutes(nearest_10)),
#          aes(x = tod, y = 10000, fill = Type), inherit.aes = FALSE) +
scale_fill_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
guide = 'none') +
# scale_y_continuous(labels = scales::comma, limits = c(1e5, 8.5e5)) +
# guides(color = guide_legend(position = "inside")) +
theme(#legend.position.inside = c(0.8, 0.9),
legend.title = element_blank())
p1
ggsave('figures/fig3_draft.pdf', p1, width = 6, height = 5, dpi = 300)
p1 <- df_summarised_10min %>%
ggplot(aes(x = tod, y = mean_PMN, color = Type)) +
geom_line(linewidth = 0.8) +
theme_classic() +
theme(strip.background = element_blank()) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") + xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
# geom_col(data = wasserstein10min %>%
#            rename(Type = closest_type) %>%
#            mutate(tod = as.POSIXct("2023-12-13 00:00:00") + minutes(nearest_10)),
#          aes(x = tod, y = 10000, fill = Type), inherit.aes = FALSE) +
scale_fill_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
guide = 'none') +
scale_y_continuous(labels = scales::comma, limits = c(1e5, 8.5e5)) +
# guides(color = guide_legend(position = "inside")) +
theme(#legend.position.inside = c(0.8, 0.9),
legend.title = element_blank())
p1
ggsave('figures/fig3_draft.pdf', p1, width = 6, height = 5, dpi = 300)
p1 <- df_summarised_10min %>%
ggplot(aes(x = tod, y = mean_PMN, color = Type)) +
geom_line(linewidth = 0.8) +
theme_classic() +
theme(strip.background = element_blank()) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") + xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
# geom_col(data = wasserstein10min %>%
#            rename(Type = closest_type) %>%
#            mutate(tod = as.POSIXct("2023-12-13 00:00:00") + minutes(nearest_10)),
#          aes(x = tod, y = 10000, fill = Type), inherit.aes = FALSE) +
scale_fill_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
guide = 'none') +
scale_y_continuous(labels = scales::comma, limits = c(1e5, 8.5e5)) +
guides(color = guide_legend(position = "inside")) +
theme(#legend.position.inside = c(0.8, 0.9),
legend.title = element_blank())
p1
p1 <- df_summarised_10min %>%
ggplot(aes(x = tod, y = mean_PMN, color = Type)) +
geom_line(linewidth = 0.8) +
theme_classic() +
theme(strip.background = element_blank()) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") + xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
# geom_col(data = wasserstein10min %>%
#            rename(Type = closest_type) %>%
#            mutate(tod = as.POSIXct("2023-12-13 00:00:00") + minutes(nearest_10)),
#          aes(x = tod, y = 10000, fill = Type), inherit.aes = FALSE) +
scale_fill_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
guide = 'none') +
scale_y_continuous(labels = scales::comma, limits = c(1e5, 8.5e5)) +
guides(color = guide_legend(position = "inside")) +
theme(legend.position.inside = c(0.8, 0.9),
legend.title = element_blank())
p1
a
geom_vline(color = 'grey50', xintercept = as.POSIXct("2023-12-13 00:00:00") + minutes(315), linetype = 'dashed', linewidth = 0.5) +
geom_vline(color = 'grey50', xintercept = as.POSIXct("2023-12-13 00:00:00") + minutes(1070), linetype = 'dashed', linewidth = 0.5)
p1
p1 <- df_summarised_10min %>%
ggplot(aes(x = tod, y = mean_PMN, color = Type)) +
geom_line(linewidth = 0.8) +
theme_classic() +
theme(strip.background = element_blank()) +
scale_x_datetime(labels = date_format("%H:%M", tz = "Europe/Amsterdam"), date_minor_breaks = "hour") +
ylab("Mean Power-minus-Noise") + xlab("Time of Day") +
scale_color_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
breaks = c("Natural_Regeneration", "Pasture", "Plantation", "Reference_Forest"),
labels = c("Natural Regeneration", "Pasture", "Plantation", "Reference Forest"),
# guide = 'none'
) +
# geom_col(data = wasserstein10min %>%
#            rename(Type = closest_type) %>%
#            mutate(tod = as.POSIXct("2023-12-13 00:00:00") + minutes(nearest_10)),
#          aes(x = tod, y = 10000, fill = Type), inherit.aes = FALSE) +
scale_fill_manual(values = c("#4477AA", "#CCBB44", "#EE6677", "#228833"),
guide = 'none') +
scale_y_continuous(labels = scales::comma, limits = c(1e5, 8.5e5)) +
guides(color = guide_legend(position = "inside")) +
theme(legend.position.inside = c(0.8, 0.9),
legend.title = element_blank()) +
geom_vline(color = 'grey50', xintercept = as.POSIXct("2023-12-13 00:00:00") + minutes(315), linetype = 'dashed', linewidth = 0.5) +
geom_vline(color = 'grey50', xintercept = as.POSIXct("2023-12-13 00:00:00") + minutes(1070), linetype = 'dashed', linewidth = 0.5)
p1
ggsave('figures/fig3_draft.pdf', p1, width = 6, height = 5, dpi = 300)
SitesIncluded <- fread('data/sites_type_table.csv')
