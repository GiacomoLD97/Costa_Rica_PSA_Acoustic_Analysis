colnames(Plant2Past) <- c("Timebin", "Distance", "FrequencyCat", "Type")
Dist2PastRows <- rbind(Nat2Past, Ref2Past, Plant2Past)
Dist2Reference <- read.csv("/Users/giacomodelgado/Downloads/wasserstein10min_freq_toRefForest.csv")
Nat2Ref <- Dist2Reference %>% subset(select = c(nearest_10, distance_nat, freq_category))
Nat2Ref$Type <- "Natural_Regeneration"
colnames(Nat2Ref) <- c("Timebin", "Distance", "FrequencyCat", "Type")
Past2Ref <- Dist2Reference %>% subset(select = c(nearest_10, distance_past, freq_category))
Past2Ref$Type <- "Pasture"
colnames(Past2Ref) <- c("Timebin", "Distance", "FrequencyCat", "Type")
Plant2Ref <- Dist2Reference %>% subset(select = c(nearest_10, distance_plant, freq_category))
Plant2Ref$Type <- "Plantation"
colnames(Plant2Ref) <- c("Timebin", "Distance", "FrequencyCat", "Type")
Dist2RefRows <- rbind(Nat2Ref, Past2Ref, Plant2Ref)
View(Dist2RefRows)
Dist2RefRows %>% group_by(Timebin, Type) %>% mutate(meanDistance = mean(Distance)) %>%
subset(select = -c(Distance, FrequencyCat)) %>% unique() %>% ungroup() %>%
ggboxplot(., x = "Type", y = "meanDistance", add = "jitter")
Dist2RefRows %>% group_by(FrequencyCat, Type) %>% mutate(meanDistance = mean(Distance)) %>%
subset(select = -c(Distance, FrequencyCat)) %>% unique() %>% ungroup() %>%
ggboxplot(., x = "Type", y = "meanDistance", add = "jitter")
Dist2RefRows %>% group_by(FrequencyCat, Type) %>% mutate(meanDistance = mean(Distance)) %>%
subset(select = -c(Distance, FrequencyCat)) %>% unique() %>% ungroup() %>%
ggboxplot(., x = "Type", y = "meanDistance", add = "jitter")
Dist2RefRows %>% group_by(Timebin, Type) %>% mutate(meanDistance = mean(Distance)) %>%
subset(select = -c(Distance, FrequencyCat)) %>% unique() %>% ungroup() %>%
ggboxplot(., x = "Type", y = "meanDistance", add = "jitter")
Dist2PastRows %>% group_by(Timebin, Type) %>% mutate(meanDistance = mean(Distance)) %>%
subset(select = -c(Distance, FrequencyCat)) %>% unique() %>% ungroup() %>%
ggboxplot(., x = "Type", y = "meanDistance", add = "jitter")
View(merged_data)
#Extract included timebins for use in later analyses
selectedtimes <- allbestmodels %>% subset(select %in% c(nearest, include))
#Extract included timebins for use in later analyses
selectedtimes <- allbestmodels %>% subset(select = c(nearest, include))
View(selectedtimes)
#Extract included timebins for use in later analyses
selectedtimes <- allbestmodels %>% subset(select = c(nearest, include)) %>% unique()
View(selectedtimes)
View(formerging)
?write.csv
#Extract included timebins for use in later analyses
write.csv(formerging, "/Users/giacomodelgado/Documents/GitHub/Costa_Rica_PSA_Acoustic_Analysis/data/identifiedminutes.csv")
includedtimes <- read.csv("Users/giacomodelgado/Documents/GitHub/Costa_Rica_PSA_Acoustic_Analysis/data/identifiedminutes.csv")
includedtimes <- read.csv("Users/giacomodelgado/Documents/GitHub/Costa_Rica_PSA_Acoustic_Analysis/data/identifiedminutes.csv")
identifiedminutes <- read.csv("~/Documents/GitHub/Costa_Rica_PSA_Acoustic_Analysis/data/identifiedminutes.csv")
View(identifiedminutes)
includedtimes <- read.csv("Users/giacomodelgado/Documents/GitHub/Costa_Rica_PSA_Acoustic_Analysis/data/identifiedminutes.csv")
includedtimes <- read.csv("/Users/giacomodelgado/Documents/GitHub/Costa_Rica_PSA_Acoustic_Analysis/data/identifiedminutes.csv")
includedtimes <- includedttimes %>% subset(include == "TRUE") %>% subset(select = nearest_10) %>% unique() %>% as.vector()
includedtimes <- read.csv("/Users/giacomodelgado/Documents/GitHub/Costa_Rica_PSA_Acoustic_Analysis/data/identifiedminutes.csv")
includedtimes <- includedttimes %>% subset(include == "TRUE") %>% subset(select = nearest_10) %>% unique() %>% as.vector()
includedtimes <- includedtimes %>% subset(include == "TRUE") %>% subset(select = nearest_10) %>% unique() %>% as.vector()
View(includedtimes)
includedtimes <- includedtimes %>% subset(include == "TRUE") %>% subset(select = nearest) %>% unique() %>% as.vector()
includedtimes
TrimDist2Past <- Dist2PastRows %>% subset(FrequencyCat %in% c("3-4 kHz", "4-5 kHz", "5-6 kHz", "6-7 kHz", "7-8 kHz", "8-9 kHz")) %>%
subset(Timebin %in% includedtimes) %>% group_by(Timebin, Type) %>% mutate(meanDistance = mean(Distance)) %>%
subset(select = -c(Distance, FrequencyCat)) %>% unique() %>% ungroup()
TrimDist2Ref <- Dist2RefRows %>% subset(FrequencyCat %in% c("3-4 kHz", "4-5 kHz", "5-6 kHz", "6-7 kHz", "7-8 kHz", "8-9 kHz")) %>%
subset(Timebin %in% includedtimes) %>% group_by(Timebin, Type) %>% mutate(meanDistance = mean(Distance)) %>%
subset(select = -c(Distance, FrequencyCat)) %>% unique() %>% ungroup()
Dist2PastRows %>% subset(FrequencyCat %in% c("3-4 kHz", "4-5 kHz", "5-6 kHz", "6-7 kHz", "7-8 kHz", "8-9 kHz"))
Dist2PastRows %>% subset(FrequencyCat %in% c("3-4 kHz", "4-5 kHz", "5-6 kHz", "6-7 kHz", "7-8 kHz", "8-9 kHz")) %>%
subset(Timebin %in% includedtimes)
includedtimes
Dist2PastRows %>% subset(FrequencyCat %in% c("3-4 kHz", "4-5 kHz", "5-6 kHz", "6-7 kHz", "7-8 kHz", "8-9 kHz")) %>%
subset(Timebin %in% includedtimes$nearest)
TrimDist2Past <- Dist2PastRows %>% subset(FrequencyCat %in% c("3-4 kHz", "4-5 kHz", "5-6 kHz", "6-7 kHz", "7-8 kHz", "8-9 kHz")) %>%
subset(Timebin %in% includedtimes$nearest) %>% group_by(Timebin, Type) %>% mutate(meanDistance = mean(Distance)) %>%
subset(select = -c(Distance, FrequencyCat)) %>% unique() %>% ungroup()
View(TrimDist2Past)
TrimDist2Past <- Dist2PastRows %>% subset(FrequencyCat %in% c("3-4 kHz", "4-5 kHz", "5-6 kHz", "6-7 kHz", "7-8 kHz", "8-9 kHz")) %>%
subset(Timebin %in% includedtimes$nearest) %>% group_by(Timebin, Type) %>% mutate(meanDistance = mean(Distance)) %>%
subset(select = -c(Distance, FrequencyCat)) %>% unique() %>% ungroup()
TrimDist2Ref <- Dist2RefRows %>% subset(FrequencyCat %in% c("3-4 kHz", "4-5 kHz", "5-6 kHz", "6-7 kHz", "7-8 kHz", "8-9 kHz")) %>%
subset(Timebin %in% includedtimes$nearest) %>% group_by(Timebin, Type) %>% mutate(meanDistance = mean(Distance)) %>%
subset(select = -c(Distance, FrequencyCat)) %>% unique() %>% ungroup()
ggboxplot(TrimDist2Past, x = "Type", y = "meanDistance", add = "jitter")
ggboxplot(TrimDist2Ref, x = "Type", y = "meanDistance", add = "jitter")
ggboxplot(TrimDist2Past, x = "Timebin", y = "meanDistance", group = "Type", add = "jitter")
ggboxplot(TrimDist2Past, x = "Timebin", y = "meanDistance", color = "Type", add = "jitter")
TrimDist2Past <- Dist2PastRows %>% subset(FrequencyCat %in% c("3-4 kHz", "4-5 kHz", "5-6 kHz", "6-7 kHz", "7-8 kHz", "8-9 kHz")) %>%
subset(Timebin %in% includedtimes$nearest) %>% group_by(Timebin, Type) %>% mutate(meanDistance = mean(Distance)) %>% unique() %>% ungroup()
TrimDist2Ref <- Dist2RefRows %>% subset(FrequencyCat %in% c("3-4 kHz", "4-5 kHz", "5-6 kHz", "6-7 kHz", "7-8 kHz", "8-9 kHz")) %>%
subset(Timebin %in% includedtimes$nearest) %>% group_by(Timebin, Type) %>% mutate(meanDistance = mean(Distance)) %>% unique() %>% ungroup()
#Look at distances over the course of the day before averaging
ggboxplot(TrimDist2Past, x = "Timebin", y = "Distance", color = "Type", add = "jitter")
#Look at distances over the course of the day before averaging
ggboxplot(TrimDist2Past, x = "Timebin", y = "Distance", color = "Type")
TrimDist2Past <- Dist2PastRows %>% subset(FrequencyCat %in% c("3-4 kHz", "4-5 kHz", "5-6 kHz", "6-7 kHz", "7-8 kHz", "8-9 kHz")) %>%
subset(Timebin %in% includedtimes$nearest) %>% group_by(Timebin, Type) %>% mutate(meanDistance = mean(Distance)) %>%
subset(select = -c(Distance, FrequencyCat)) %>% unique() %>% ungroup()
TrimDist2Ref <- Dist2RefRows %>% subset(FrequencyCat %in% c("3-4 kHz", "4-5 kHz", "5-6 kHz", "6-7 kHz", "7-8 kHz", "8-9 kHz")) %>%
subset(Timebin %in% includedtimes$nearest) %>% group_by(Timebin, Type) %>% mutate(meanDistance = mean(Distance)) %>%
subset(select = -c(Distance, FrequencyCat)) %>% unique() %>% ungroup()
#Look at distances over the course of the day before averaging
ggplot(data = TrimDist2Past, aes(x = "Timebin", y = "meanDistance", color = "Type")) + geom_point()
View(TrimDist2Past)
#Look at distances over the course of the day before averaging
ggplot(data = TrimDist2Past, aes(x = "Timebin", y = "meanDistance")) + geom_point()
#Look at distances over the course of the day before averaging
ggplot(data = TrimDist2Past, aes(x = "Timebin", y = "meanDistance")) + geom_points()
#Look at distances over the course of the day before averaging
ggplot(data = TrimDist2Past, aes(x = "Timebin", y = "meanDistance"))
#Look at distances over the course of the day before averaging
ggplot(TrimDist2Past, aes(x = "Timebin", y = "meanDistance")) + geom_point()
?ggplot
#Look at distances over the course of the day before averaging
ggplot(TrimDist2Past, aes(Timebin, meanDistance)) + geom_point()
#Look at distances over the course of the day before averaging
ggplot(TrimDist2Past, aes(Timebin, meanDistance, color = Type)) + geom_point()
ggboxplot(TrimDist2Past, x = "Timebin", y = "meanDistance", group = "Type", add = "jitter")
ggboxplot(TrimDist2Past, x = "Timebin", y = "meanDistance", add = "jitter")
ggboxplot(TrimDist2Past, x = "Timebin", y = "meanDistance", add = "jitter")
ggboxplot(TrimDist2Past, x = "Type", y = "meanDistance", add = "jitter")
ggplot(TrimDist2Ref, aes(Timebin, meanDistance, color = Type)) + geom_point()
ggboxplot(TrimDist2Ref, x = "Type", y = "meanDistance", add = "jitter")
#Having grouped the data into meanDistances per Timebin allows us to use Friedman test for repeated measures
friedman.test(meanDistance~Type|Timebin, data=TrimDist2Past)
results.fried.Past <- TrimDist2Past %>% friedman_test(meanDistance~Type|Timebin)
friedman.test(meanDistance~Type|Timebin, data=TrimDist2Ref)
results.fried.Ref <- TrimDist2Ref %>% friedman_test(meanDistance~Type|Timebin)
View(TrimDist2Past)
#Post Hoc
pairwise.wilcox.test(TrimDist2Past$meanDistance, TrimDist2Past$Type, p.adj = "bonf")
pwc.Past <- TrimDist2Past %>% wilcox_test(as.formula(paste("meanDistance", "Type", sep="~")), paired = TRUE, p.adjust.method = "bonferroni")
pwc.Past
pairwise.wilcox.test(TrimDist2Ref$meanDistance, TrimDist2Ref$Type, p.adj = "bonf")
pwc.Ref <- TrimDist2Ref %>% wilcox_test(as.formula(paste("meanDistance", "Type", sep="~")), paired = TRUE, p.adjust.method = "bonferroni")
pwc.Ref
PasttoRefall <- Dist2PastRows %>% subset(Type == "Natural_Regeneration")
PasttoRefupper <- PasttoRef %>% subset(FrequencyCat %notin% c("0-1 kHz", "1-2 kHz", "2-3 kHz")) %>% mutate(Split = "Upper")
PasttoRefall <- Dist2PastRows %>% subset(Type == "Natural_Regeneration") %>% mutate(Split = "All")
PasttoRefupper <- PasttoRefall %>% subset(FrequencyCat %notin% c("0-1 kHz", "1-2 kHz", "2-3 kHz")) %>% mutate(Split = "Upper")
PasttoRefall
PasttoRefupper
PasttoRef <- rbind(PasttoRefall, PasttoRefupper)
AovPastRef <- aov(Distance ~ Split, data = PasttoRef)
summary(AovPastRef)
TukeyHSD(AovPastRef)
ggboxplot(PasttoRef, x = "Split", y = "Distance", add = "jitter")
pwc.Past
#Post Hoc
pairwise.wilcox.test(TrimDist2Past$meanDistance, TrimDist2Past$Type, p.adj = "bonf")
pwc.Ref
ggplot(PasttoRefall, aes(meanDistance)) +geom_histogram()
View(PasttoRefall)
ggplot(PasttoRefall, aes(Distance)) +geom_histogram()
ggplot(PasttoRefupper, aes(Distance)) +geom_histogram()
PasttoRefall %>% get_summary_stats(Distance, type = "mean_sd")
PasttoRefupper %>% get_summary_stats(Distance, type = "mean_sd")
?t.test
t.test(Distance~Split, data = PasttoRef)
ggboxplot(PasttoRef, x = "Split", y = "Distance", add = "jitter")
View(PasttoRefall)
ggboxplot(PasttoRef, x = "Split", y = "Distance", color = "FreqCategory", add = "jitter")
ggboxplot(PasttoRef, x = "Split", y = "Distance", color = "FrequencyCat", add = "jitter")
ggboxplot(PasttoRef, x = "FrequencyCat", y = "Distance", add = "jitter")
pwc.Ref <- pwc.Ref %>% add_xy_position(x = "Type")
custom_order <- c("Natural_Regeneration", "Plantation", "Pasture")
TrimDist2Ref$Type <- factor(TrimDist2Ref$Type, levels = custom_order)
ggboxplot(TrimDist2Ref, x = "Type", y = "meanDistance", add = "point") +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref,  detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
ggboxplot(TrimDist2Ref, x = "Type", y = "meanDistance", color = "Timebin", add = "point") +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref,  detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
ggboxplot(TrimDist2Ref, x = "Type", y = "meanDistance", color = as.factor("Timebin"), add = "point") +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref,  detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
ggboxplot(TrimDist2Ref, x = "Type", y = "meanDistance", color = as.factor(Timebin), add = "point") +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref,  detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
View(TrimDist2Ref)
class(TrimDist2Ref$Timebin)
TrimDist2Ref$Timebin <- as.factor(TrimDist2Ref$Timebin)
ggboxplot(TrimDist2Ref, x = "Type", y = "meanDistance", color = "Timebin", add = "point") +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref,  detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
ggboxplot(TrimDist2Ref, x = "Type", y = "meanDistance", add = "point", color = "Timebin") +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
ggboxplot(TrimDist2Ref, x = "Type", y = "meanDistance", add = "boxplot") +
geom_jitter(aes(color = Timebin), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
5*60
18*60
#group times into periods of the day to visualize where distances are largest
TrimDist2Ref <- TrimDist2Ref %>%
mutate(Period = case_when(
`Time period` >= 290 & `Time period` <= 350 ~ "Dawn",
`Time period` >= 1050 & `Time period` <= 1110 ~ "Dusk",
`Time period` > 350 & `Time period` < 1050 ~ "Day",
TRUE ~ "Night"
))
#group times into periods of the day to visualize where distances are largest
TrimDist2Ref <- TrimDist2Ref %>%
mutate(Period = case_when(
`Timebin` >= 290 & `Timebin` <= 350 ~ "Dawn",
`Timebin` >= 1050 & `Timebin` <= 1110 ~ "Dusk",
`Timebin` > 350 & `Timebin` < 1050 ~ "Day",
TRUE ~ "Night"
))
TrimDist2Ref <- Dist2RefRows %>% subset(FrequencyCat %in% c("3-4 kHz", "4-5 kHz", "5-6 kHz", "6-7 kHz", "7-8 kHz", "8-9 kHz")) %>%
subset(Timebin %in% includedtimes$nearest) %>% group_by(Timebin, Type) %>% mutate(meanDistance = mean(Distance)) %>%
subset(select = -c(Distance, FrequencyCat)) %>% unique() %>% ungroup()
pwc.Ref <- pwc.Ref %>% add_xy_position(x = "Type")
custom_order <- c("Natural_Regeneration", "Plantation", "Pasture")
TrimDist2Ref$Type <- factor(TrimDist2Ref$Type, levels = custom_order)
#group times into periods of the day to visualize where distances are largest
TrimDist2Ref <- TrimDist2Ref %>%
mutate(Period = case_when(
`Timebin` >= 290 & `Timebin` <= 350 ~ "Dawn",
`Timebin` >= 1050 & `Timebin` <= 1110 ~ "Dusk",
`Timebin` > 350 & `Timebin` < 1050 ~ "Day",
TRUE ~ "Night"
))
TrimDist2Ref$Timebin <- as.factor(TrimDist2Ref$Timebin)
ggboxplot(TrimDist2Ref, x = "Type", y = "meanDistance", add = "boxplot") +
geom_jitter(aes(color = Timebin), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
ggboxplot(TrimDist2Ref, x = "Type", y = "meanDistance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
#convert distances to scaled values
TrimDist2Ref <- TrimDist2Ref %>% mutate('Scaled Distance' = meanDistance/max(TrimDist2Ref$meanDistance))
View(TrimDist2Ref)
ggboxplot(TrimDist2Ref, x = "Type", y = "Scaled Distance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
#convert distances to scaled values
max(TrimDist2Ref$meanDistance)
TrimDist2Ref <- TrimDist2Ref %>% mutate('Scaled Distance' = meanDistance/maxdist)
#convert distances to scaled values
maxdist<-max(TrimDist2Ref$meanDistance)
TrimDist2Ref <- TrimDist2Ref %>% mutate('Scaled Distance' = meanDistance/maxdist)
ggboxplot(TrimDist2Ref, x = "Type", y = "Scaled Distance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
ggboxplot(TrimDist2Ref, x = "Type", y = "Scaled Distance", add = "boxplot")
ggboxplot(TrimDist2Ref, x = "Type", y = "Scaled Distance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2))
ggboxplot(TrimDist2Ref, x = "Type", y = "Scaled Distance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE)
ggboxplot(TrimDist2Ref, x = "Type", y = "Scaled Distance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2))
#redo statistical tests
results.fried.Ref <- TrimDist2Ref %>% friedman_test('Scaled Distance'~Type|Timebin)
#redo statistical tests
results.fried.Ref <- TrimDist2Ref %>% friedman_test("Scaled Distance"~Type|Timebin)
#convert distances to scaled values
maxdist<-max(TrimDist2Ref$meanDistance)
TrimDist2Ref <- TrimDist2Ref %>% mutate(ScaledDistance = meanDistance/maxdist)
#redo statistical tests
results.fried.Ref <- TrimDist2Ref %>% friedman_test(ScaledDistance~Type|Timebin)
pwc.Ref <- TrimDist2Ref %>% wilcox_test(as.formula(paste("ScaledDistance", "Type", sep="~")), paired = TRUE, p.adjust.method = "bonferroni")
ggboxplot(TrimDist2Ref, x = "Type", y = "ScaledDistance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
pwc.Ref <- pwc.Ref %>% add_xy_position(x = "Type")
custom_order <- c("Natural_Regeneration", "Plantation", "Pasture")
TrimDist2Ref$Type <- factor(TrimDist2Ref$Type, levels = custom_order)
ggboxplot(TrimDist2Ref, x = "Type", y = "ScaledDistance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
custom_order <- c("Natural Regeneration", "Plantation", "Pasture")
TrimDist2Ref$Type <- factor(TrimDist2Ref$Type, levels = custom_order)
ggboxplot(TrimDist2Ref, x = "Type", y = "ScaledDistance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
TrimDist2Ref$Type[TrimDist2Ref$Type == "Natural_Regeneration"]
TrimDist2Ref$Type["Natural_Regeneration"]
TrimDist2Ref$Type <- ifelse(grepl("Nat", TrimDist2Ref$Type, ignore.case = TRUE), "Natural Regeneration", TrimDist2Ref$Type)
custom_order <- c("Natural Regeneration", "Plantation", "Pasture")
TrimDist2Ref$Type <- factor(TrimDist2Ref$Type, levels = custom_order)
ggboxplot(TrimDist2Ref, x = "Type", y = "ScaledDistance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
View(TrimDist2Ref)
TrimDist2Ref <- Dist2RefRows %>% subset(FrequencyCat %in% c("3-4 kHz", "4-5 kHz", "5-6 kHz", "6-7 kHz", "7-8 kHz", "8-9 kHz")) %>%
subset(Timebin %in% includedtimes$nearest) %>% group_by(Timebin, Type) %>% mutate(meanDistance = mean(Distance)) %>%
subset(select = -c(Distance, FrequencyCat)) %>% unique() %>% ungroup()
#convert distances to scaled values
maxdist<-max(TrimDist2Ref$meanDistance)
TrimDist2Ref <- TrimDist2Ref %>% mutate(ScaledDistance = meanDistance/maxdist)
#redo statistical tests and plot
results.fried.Ref <- TrimDist2Ref %>% friedman_test(ScaledDistance~Type|Timebin)
pwc.Ref <- TrimDist2Ref %>% wilcox_test(as.formula(paste("ScaledDistance", "Type", sep="~")), paired = TRUE, p.adjust.method = "bonferroni")
pwc.Ref <- pwc.Ref %>% add_xy_position(x = "Type")
TrimDist2Ref$Type <- ifelse(grepl("Nat", TrimDist2Ref$Type, ignore.case = TRUE), "Natural Regeneration", TrimDist2Ref$Type)
View(TrimDist2Ref)
custom_order <- c("Natural Regeneration", "Plantation", "Pasture")
TrimDist2Ref$Type <- factor(TrimDist2Ref$Type, levels = custom_order)
ggboxplot(TrimDist2Ref, x = "Type", y = "ScaledDistance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
#group times into periods of the day to visualize where distances are largest
TrimDist2Ref <- TrimDist2Ref %>%
mutate(Period = case_when(
`Timebin` >= 290 & `Timebin` <= 350 ~ "Dawn",
`Timebin` >= 1050 & `Timebin` <= 1110 ~ "Dusk",
`Timebin` > 350 & `Timebin` < 1050 ~ "Day",
TRUE ~ "Night"
))
ggboxplot(TrimDist2Ref, x = "Type", y = "ScaledDistance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
ggboxplot(TrimDist2Ref, x = "Type", y = "ScaledDistance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
x = "Scaled Distance"
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
ggboxplot(TrimDist2Ref, x = "Type", y = "ScaledDistance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
x = "Scaled Distance",
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
ggboxplot(TrimDist2Ref, x = "Type", y = "ScaledDistance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
y = "Scaled Distance",
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
ggboxplot(TrimDist2Ref, x = "Type", y = "ScaledDistance", add = "boxplot") +
geom_jitter(aes(color = Period), position = position_jitter(0.2)) +
stat_pvalue_manual(pwc.Ref, hide.ns = TRUE) +
labs(
x = "Intervention Type",
y = "Scaled Distance",
subtitle = get_test_label(results.fried.Ref, detailed = TRUE),
caption = get_pwc_label(pwc.Ref)
)
ggsave('/Users/giacomodelgado/Documents/GitHub/Costa_Rica_Acoustic_Analysis/Figure3B_boxplot.pdf')
?ggsave
ggsave('/Users/giacomodelgado/Documents/GitHub/Costa_Rica_PSA_Acoustic_Analysis/figures/Figure3B_boxplot.pdf')
#Plot
ClassFrequencyEstimates %>%
ggplot(aes(x = MidFreq, fill = Annotation, color = Annotation)) +
geom_density(alpha = 0.5) +
labs(
title = "Density of Call Frequencies by Taxonomic Group",
x = "Middle Frequency of Call",
y = "Density"
) +
scale_x_continuous(
breaks = seq(0, 15000, by = 1000),  # Set x-axis breaks every 1000 units
limits = c(0, 15000)                # Limit x-axis to 0-15,000
) +
scale_fill_manual(values = custom_colors) +  # Set custom fill colors from the "spectral" palette
scale_color_manual(values = custom_colors) +  # Set custom line colors from the "spectral" palette
theme_minimal() +
theme(legend.position = "top") +
geom_boxplot(
data = ClassFrequencyEstimates,
aes(x = MidFreq, y = density, color = Annotation),
fill = NA,           # Make the boxes hollow
outlier.shape = NA,  # Remove outlier points
width = 0.0002       # Make the boxes smaller
) +
geom_vline(xintercept = c(0, 9000), colour="lightgreen", linetype = "longdash")
ggsave('/Users/giacomodelgado/Documents/GitHub/Costa_Rica_PSA_Acoustic_Analysis/figures/Figure2B_DensityandBox.pdf')
line_plot <- forplotting %>%
ggplot(aes(x = time_format, y = MeanPMN, group = Type, color = Type)) +
geom_line() +
labs(x = "Time of Day", y = "Average PMN Value") +
scale_color_manual(name = "Type", values = type_colors) +  # Set manual colors
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")  # Adjust the date_breaks and date_labels as per your preference
line_plot
forplotting$time_format <- as.POSIXct(forplotting$time_format, format = "%H:%M")
# Define colors for each Type group
type_colors <- c("Reference_Forest" = "#228833",
"Natural_Regeneration" = "#4477AA",
"Plantation" = "#EE6677",
"Pasture" = "#CCBB44")
custom_order <- c("Reference_Forest", "Natural_Regeneration", "Plantation", "Pasture")
forplotting$Type <- factor(forplotting$Type, levels = custom_order)
line_plot <- forplotting %>%
ggplot(aes(x = time_format, y = MeanPMN, group = Type, color = Type)) +
geom_line() +
labs(x = "Time of Day", y = "Average PMN Value") +
scale_color_manual(name = "Type", values = type_colors) +  # Set manual colors
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")  # Adjust the date_breaks and date_labels as per your preference
line_plot
agg_data <- ModellingData %>%
mutate(nearest_10 = round_any(Minute, 10, round)) %>%
dplyr::group_by(Type, nearest_10) %>%
mutate(MeanPMN = mean(SummedPMN), MeanNoise = mean(SummedNoise)) %>%
ungroup()
df <- data.frame(nearest_10 = seq(0, 1440, by = 10), time_format = sprintf("%02d:%02d", seq(0, 1440, by = 10) %/% 60, seq(0, 1440, by = 10) %% 60))
forplotting <- agg_data %>% subset(select = c(Minute, nearest_10, MeanPMN, Site, Type)) %>% unique()
forplotting <- merge(forplotting, df, by="nearest_10")
forplotting$time_format <- as.POSIXct(forplotting$time_format, format = "%H:%M")
# Define colors for each Type group
type_colors <- c("Reference_Forest" = "#228833",
"Natural_Regeneration" = "#4477AA",
"Plantation" = "#EE6677",
"Pasture" = "#CCBB44")
custom_order <- c("Reference_Forest", "Natural_Regeneration", "Plantation", "Pasture")
forplotting$Type <- factor(forplotting$Type, levels = custom_order)
line_plot <- forplotting %>%
ggplot(aes(x = time_format, y = MeanPMN, group = Type, color = Type)) +
geom_line() +
labs(x = "Time of Day", y = "Average PMN Value") +
scale_color_manual(name = "Type", values = type_colors) +  # Set manual colors
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")  # Adjust the date_breaks and date_labels as per your preference
line_plot
ggsave('/Users/giacomodelgado/Documents/GitHub/Costa_Rica_PSA_Acoustic_Analysis/figures/Figure2A_lineplot.pdf')
forplotting %>%
ggplot(aes(x = time_format, y = MeanPMN, group = Type, color = Type)) +
geom_line() +
labs(x = "Time of Day", y = "Average PMN Value") +
scale_color_manual(name = "Type", values = type_colors) +  # Set manual colors
scale_x_datetime(date_breaks = "2 hours", date_labels = "%H:%M")  # Adjust the date_breaks and date_labels as per your preference
ggsave('/Users/giacomodelgado/Documents/GitHub/Costa_Rica_PSA_Acoustic_Analysis/figures/Figure2A_lineplot.pdf')
#Plot
ClassFrequencyEstimates %>%
ggplot(aes(x = MidFreq, fill = Annotation, color = Annotation)) +
geom_density(alpha = 0.5) +
labs(
title = "Density of Call Frequencies by Taxonomic Group",
x = "Middle Frequency of Call",
y = "Density"
) +
scale_x_continuous(
breaks = seq(0, 15000, by = 1000),  # Set x-axis breaks every 1000 units
limits = c(0, 15000)                # Limit x-axis to 0-15,000
) +
scale_fill_manual(values = custom_colors) +  # Set custom fill colors from the "spectral" palette
scale_color_manual(values = custom_colors) +  # Set custom line colors from the "spectral" palette
theme_minimal() +
theme(legend.position = "top") +
geom_boxplot(
data = ClassFrequencyEstimates,
aes(x = MidFreq, y = density, color = Annotation),
fill = NA,           # Make the boxes hollow
outlier.shape = NA,  # Remove outlier points
width = 0.0002       # Make the boxes smaller
) +
geom_vline(xintercept = c(0, 9000), colour="lightgreen", linetype = "longdash")
ggsave('/Users/giacomodelgado/Documents/GitHub/Costa_Rica_PSA_Acoustic_Analysis/figures/Figure2B_DensityandBox.pdf')
list.functions.in.file('/Users/giacomodelgado/Documents/GitHub/Costa_Rica_PSA_Acoustic_Analysis/R/ResultsofDistanceCalculations.R')
p <- list.functions.in.file('/Users/giacomodelgado/Documents/GitHub/Costa_Rica_PSA_Acoustic_Analysis/R/ResultsofDistanceCalculations.R')
summary(p)
